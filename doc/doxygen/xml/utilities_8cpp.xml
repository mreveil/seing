<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="utilities_8cpp" kind="file" language="C++">
    <compoundname>utilities.cpp</compoundname>
    <includes local="no">math.h</includes>
    <includes refid="atom_8h" local="yes">atom.h</includes>
    <includes refid="atomicsystem_8h" local="yes">atomicsystem.h</includes>
    <includes refid="utilities_8h" local="yes">utilities.h</includes>
    <incdepgraph>
      <node id="7">
        <label>periodictable.h</label>
        <link refid="periodictable_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>atom.h</label>
        <link refid="atom_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="1">
        <label>utilities.cpp</label>
        <link refid="utilities_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>atomicsystem.h</label>
        <link refid="atomicsystem_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>utilities.h</label>
        <link refid="utilities_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="utilities_8cpp_1a525335710b53cb064ca56b936120431e" prot="public" static="no">
        <name>_USE_MATH_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="1" column="9" bodyfile="utilities.cpp" bodystart="1" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="utilities_8cpp_1a448f42187dbaad30e904f54a8d69179e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double cutoff_func</definition>
        <argsstring>(double r, double cutoff)</argsstring>
        <name>cutoff_func</name>
        <param>
          <type>double</type>
          <defname>r</defname>
        </param>
        <param>
          <type>double</type>
          <defname>cutoff</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that returns the value of the cutoff function given the cutoff value and the current distance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="12" column="8" bodyfile="utilities.cpp" bodystart="12" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="utilities_8cpp_1ab13ed3cd615c5f029def436b23a7b80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double cutoff_func_prime</definition>
        <argsstring>(double r, double cutoff)</argsstring>
        <name>cutoff_func_prime</name>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="19" column="8" bodyfile="utilities.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="utilities_8cpp_1a4d3aa2f8d4efc9960192c7532bb05d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_min_distance</definition>
        <argsstring>(double a, double b, double size, bool pbc)</argsstring>
        <name>get_min_distance</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pbc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="27" column="8" bodyfile="utilities.cpp" bodystart="27" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="utilities_8cpp_1ab93f305620574ecf89f1fb0b6993532c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double calculate_norm</definition>
        <argsstring>(double x, double y, double z)</argsstring>
        <name>calculate_norm</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="41" column="8" bodyfile="utilities.cpp" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="utilities_8cpp_1aa3900a7b4a296258d1b71dcfbd852af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* get_vector</definition>
        <argsstring>(AtomicSystem atomicsystem, int i, int j)</argsstring>
        <name>get_vector</name>
        <param>
          <type><ref refid="classAtomicSystem" kindref="compound">AtomicSystem</ref></type>
          <declname>atomicsystem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="47" column="8" bodyfile="utilities.cpp" bodystart="47" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="utilities_8cpp_1aa316a44b5678dccb2f57adf46cc8cb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Kronecker</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>Kronecker</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="70" column="5" bodyfile="utilities.cpp" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="utilities_8cpp_1a256715f3324903f332bf56cbba488306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dot</definition>
        <argsstring>(double *vec1, double *vec2)</argsstring>
        <name>dot</name>
        <param>
          <type>double *</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vec2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="77" column="8" bodyfile="utilities.cpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="utilities_8cpp_1ae9945c15826a9c1b5c141db314b7f8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int factorial</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>factorial</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="88" column="14" bodyfile="utilities.cpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="utilities_8cpp_1a9823ef7320113b5363e71556d0322324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_binomial</definition>
        <argsstring>(int n, int k)</argsstring>
        <name>get_binomial</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utilities.cpp" line="96" column="8" bodyfile="utilities.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="atom_8h" kindref="compound">atom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="atomicsystem_8h" kindref="compound">atomicsystem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utilities_8h" kindref="compound">utilities.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1a448f42187dbaad30e904f54a8d69179e" kindref="member">cutoff_func</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutoff){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;=<sp/>cutoff)<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>0.5*(1+cos(M_PI*r/cutoff));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1ab13ed3cd615c5f029def436b23a7b80b" kindref="member">cutoff_func_prime</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutoff){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;=<sp/>cutoff)<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(-0.5*M_PI/cutoff)*sin(M_PI*r/cutoff);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//result<sp/>+=<sp/>0.5*(1+cos(M_PI*r/cutoff));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1a4d3aa2f8d4efc9960192c7532bb05d17" kindref="member">get_min_distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pbc){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>b<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pbc<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/><sp/><sp/>size*0.5)<sp/>dist<sp/>=<sp/>dist<sp/>-<sp/>size;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;=<sp/>-size*0.5)<sp/>dist<sp/>=<sp/>dist<sp/>+<sp/>size;<sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1ab93f305620574ecf89f1fb0b6993532c" kindref="member">calculate_norm</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow(pow(x,2)+pow(y,2)+pow(z,2),0.5);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="utilities_8cpp_1aa3900a7b4a296258d1b71dcfbd852af6" kindref="member">get_vector</ref>(<ref refid="classAtomicSystem" kindref="compound">AtomicSystem</ref><sp/>atomicsystem,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Rij<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[3];</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xsize<sp/>=<sp/>atomicsystem.<ref refid="classAtomicSystem_1a621fa961e13c049c5e8ccd0bac679f02" kindref="member">get_xsize</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ysize<sp/>=<sp/>atomicsystem.<ref refid="classAtomicSystem_1a3767224770330c5881f88517dc3b3e74" kindref="member">get_ysize</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zsize<sp/>=<sp/>atomicsystem.<ref refid="classAtomicSystem_1a456833955091210604a06b277da3cf9f" kindref="member">get_zsize</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xpbc<sp/>=<sp/>atomicsystem.<ref refid="classAtomicSystem_1a482d58dc237c99908bd09a6c7d009c48" kindref="member">get_xpbc</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ypbc<sp/>=<sp/>atomicsystem.<ref refid="classAtomicSystem_1a75dcff418d40045926392ca81bb8c5bd" kindref="member">get_ypbc</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zpbc<sp/>=<sp/>atomicsystem.<ref refid="classAtomicSystem_1a10e194744a00bb2506cc6c72c3fab4a0" kindref="member">get_zpbc</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classAtom" kindref="compound">Atom</ref><sp/>Ai=atomicsystem.<ref refid="classAtomicSystem_1a0c6a87a01f5aec7e76a4aec87fc6f0c5" kindref="member">get_atom</ref>(i);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classAtom" kindref="compound">Atom</ref><sp/>Aj=atomicsystem.<ref refid="classAtomicSystem_1a0c6a87a01f5aec7e76a4aec87fc6f0c5" kindref="member">get_atom</ref>(j);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>Rij[0]<sp/>=<sp/><ref refid="utilities_8cpp_1a4d3aa2f8d4efc9960192c7532bb05d17" kindref="member">get_min_distance</ref>(Ai.<ref refid="classAtom_1a60c78b2f17643f02744dc059ad4614bd" kindref="member">get_x</ref>(),Aj.<ref refid="classAtom_1a60c78b2f17643f02744dc059ad4614bd" kindref="member">get_x</ref>(),xsize,xpbc);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Rij[1]<sp/>=<sp/><ref refid="utilities_8cpp_1a4d3aa2f8d4efc9960192c7532bb05d17" kindref="member">get_min_distance</ref>(Ai.<ref refid="classAtom_1a2b4f6fd59d0be3a6be685b1f7d008585" kindref="member">get_y</ref>(),Aj.<ref refid="classAtom_1a2b4f6fd59d0be3a6be685b1f7d008585" kindref="member">get_y</ref>(),ysize,ypbc);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Rij[2]<sp/>=<sp/><ref refid="utilities_8cpp_1a4d3aa2f8d4efc9960192c7532bb05d17" kindref="member">get_min_distance</ref>(Ai.<ref refid="classAtom_1adf0968985ac6f9c8c8d5f280070790b1" kindref="member">get_z</ref>(),Aj.<ref refid="classAtom_1adf0968985ac6f9c8c8d5f280070790b1" kindref="member">get_z</ref>(),zsize,zpbc);<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rij;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1aa316a44b5678dccb2f57adf46cc8cb06" kindref="member">Kronecker</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==j)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1a256715f3324903f332bf56cbba488306" kindref="member">dot</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vec1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vec2)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vec1[0]*vec2[0]<sp/>+<sp/>vec1[1]*vec2[1]<sp/>+<sp/>vec1[2]*vec2[2]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>BispectrumCalculator::calculate_factorial(int<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>(n<sp/>==<sp/>1<sp/>||<sp/>n<sp/>==<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>factorial(n<sp/>-<sp/>1)<sp/>*<sp/>n;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1ae9945c15826a9c1b5c141db314b7f8b4" kindref="member">factorial</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>i;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1a9823ef7320113b5363e71556d0322324" kindref="member">get_binomial</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="utilities_8cpp_1ae9945c15826a9c1b5c141db314b7f8b4" kindref="member">factorial</ref>(n)/(<ref refid="utilities_8cpp_1ae9945c15826a9c1b5c141db314b7f8b4" kindref="member">factorial</ref>(k)*<ref refid="utilities_8cpp_1ae9945c15826a9c1b5c141db314b7f8b4" kindref="member">factorial</ref>(n-k));</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="utilities.cpp"/>
  </compounddef>
</doxygen>
